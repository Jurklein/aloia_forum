prompt --application/deployment/install/install_error_proxy
begin
--   Manifest
--     INSTALL: INSTALL-ERROR_PROXY
--   Manifest End
wwv_flow_imp.component_begin (
 p_version_yyyy_mm_dd=>'2024.05.31'
,p_release=>'24.1.4'
,p_default_workspace_id=>8352453064037036
,p_default_application_id=>102
,p_default_id_offset=>9614839888637612
,p_default_owner=>'WKSP_VDDEV'
);
wwv_flow_imp_shared.create_install_script(
 p_id=>wwv_flow_imp.id(10609638233420955)
,p_install_id=>wwv_flow_imp.id(10220519673453005)
,p_name=>'ERROR_PROXY'
,p_sequence=>15
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'DECLARE',
'    L_TABLE_EXISTS NUMBER := 0;',
'BEGIN',
'    SELECT',
'        COUNT(*) INTO L_TABLE_EXISTS',
'    FROM',
'        USER_TABLES',
'    WHERE',
'        TABLE_NAME = ''ERROR_MSG''',
' --AND OWNER = #OWNER#',
';',
'    IF (L_TABLE_EXISTS != 0) THEN',
'        EXECUTE IMMEDIATE ''DROP TABLE ERROR_MSG'';',
'    END IF;',
'END;',
'/',
'',
'-- create tables',
'CREATE TABLE ERROR_MSG (',
'    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT ERROR_MSG_ID_PK PRIMARY KEY,',
'    THE_USER VARCHAR2(4000 CHAR) DEFAULT ON NULL USER,',
'    THE_DATE DATE DEFAULT ON NULL SYSDATE,',
'    MSG_TYPE VARCHAR2(4000 CHAR) NOT NULL,',
'    OBJ_NAME VARCHAR2(255 CHAR),',
'    SUB_OBJ VARCHAR2(4000 CHAR),',
'    LINE_NO VARCHAR2(4000 CHAR),',
'    ERR_CODE VARCHAR2(4000 CHAR) NOT NULL,',
'    OPT_MSG VARCHAR2(4000 CHAR),',
'    STACK_TRACE VARCHAR2(4000 CHAR),',
'    STD_ERR_MSG VARCHAR2(4000 CHAR),',
'    SESSION_INFO VARCHAR2(4000 CHAR)',
');',
'',
'/',
'',
'DECLARE',
'    L_TABLE_EXISTS NUMBER := 0;',
'BEGIN',
'    SELECT',
'        COUNT(*) INTO L_TABLE_EXISTS',
'    FROM',
'        USER_TABLES',
'    WHERE',
'        TABLE_NAME = ''APEX_ERROR_MSG''',
' --AND OWNER = #OWNER#',
';',
'    IF (L_TABLE_EXISTS != 0) THEN',
'        EXECUTE IMMEDIATE ''DROP TABLE APEX_ERROR_MSG'';',
'    END IF;',
'END;',
'/',
'',
'-- create tables',
'CREATE TABLE APEX_ERROR_MSG (',
'    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT APEX_ERR_MSG_ID_PK PRIMARY KEY,',
'    THE_USER VARCHAR2(4000 CHAR) DEFAULT ON NULL USER NOT NULL,',
'    THE_DATE DATE DEFAULT ON NULL SYSDATE NOT NULL,',
'    MESSAGE VARCHAR2(4000 CHAR),',
'    ADDITIONAL_INFO VARCHAR2(4000 CHAR),',
'    DISPLAY_LOCATION VARCHAR2(40 CHAR),',
'    ASSOCIATION_TYPE VARCHAR2(40 CHAR),',
'    PAGE_ITEM_NAME VARCHAR2(255 CHAR),',
'    REGION_ID NUMBER,',
'    COLUMN_ALIAS VARCHAR2(4000 CHAR),',
'    ROW_NUM NUMBER,',
'    MODEL_INSTANCE_ID VARCHAR2(4000 CHAR),',
'    MODEL_RECORD_ID VARCHAR2(4000 CHAR),',
'    APEX_ERROR_CODE VARCHAR2(255 CHAR),',
'    IS_INTERNAL_ERROR VARCHAR2(1 CHAR) CONSTRAINT APEX_ERR_MSG_IS_INTERNAL_ER_CC CHECK (IS_INTERNAL_ERROR IN (''Y'', ''N'')),',
'    IS_COMMON_RUNTIME_ERROR VARCHAR2(1 CHAR) CONSTRAINT APEX_ERR_MSG_IS_COMMON_RUNT_CC CHECK (IS_COMMON_RUNTIME_ERROR IN (''Y'', ''N'')),',
'    ORIGINAL_MESSAGE VARCHAR2(4000 CHAR),',
'    ORIGINAL_ADDITIONAL_INFO VARCHAR2(4000 CHAR),',
'    ORA_SQLCODE NUMBER,',
'    ORA_SQLERRM VARCHAR2(4000 CHAR),',
'    ERROR_BACKTRACE VARCHAR2(4000 CHAR),',
'    ERROR_STATEMENT VARCHAR2(4000 CHAR),',
'    COMPONENT_TYPE VARCHAR2(30 CHAR),',
'    COMPONENT_ID NUMBER,',
'    COMPONENT_NAME VARCHAR2(4000 CHAR)',
');',
'',
'/',
'',
'CREATE OR REPLACE PACKAGE META_TYPE IS',
' -- Author  : LJDASILV',
' -- Created : 27-nov-21 17:58:12',
' -- Purpose : Define public types meant to better structurize other meta packages (code generator packages)',
' --------------------------------------------------------',
' -- Public type declarations',
' --------------------------------------------------------',
' --Public input sql query parameters are always insecure',
'    SUBTYPE T_INS_SQL_QUERY IS',
'        VARCHAR2(4000);',
' --A SQL query is considered "secured" (but not yet "safe") after all the input field/text/apex parameters have been sanitized/validated',
'    SUBTYPE T_SEC_SQL_QUERY IS',
'        VARCHAR2(4000);',
' --A SQL query is only considered "safe" when it is validated by a query assertion method.',
'    SUBTYPE T_SAFE_SQL_QUERY IS',
'        VARCHAR2(4000);',
' --SQL query snips (components to be combined into a complete query) are always insecure, as they can be combined with any other snip to make a malicious complete query.',
'    SUBTYPE T_INS_SQL_QUERY_SNIP IS',
'        VARCHAR2(4000);',
' -----------------------',
' --Public input pl/sql block parameters are always insecure',
'    SUBTYPE T_INS_PLSQL_BLOCK IS',
'        VARCHAR2(4000);',
' --A PL/SQL block is considered "secured" (but not yet "safe") after all the input field/text/apex parameters have been sanitized/validated',
'    SUBTYPE T_SEC_PLSQL_BLOCK IS',
'        VARCHAR2(4000);',
' --A PL/SQL block is only considered "safe" when it is validated by a block assertion method.',
'    SUBTYPE T_SAFE_PLSQL_BLOCK IS',
'        VARCHAR2(4000);',
' --PL/SQL block snips (components to be combined into a complete block) are always insecure, as they can be combined with any other snip to make a malicious complete routine.',
'    SUBTYPE T_INS_PLSQL_BLOCK_SNIP IS',
'        VARCHAR2(4000);',
' -----------------------',
' --All public input APEX parameters should be considered insecure',
'    SUBTYPE T_INS_APEX_SQL_P IS',
'        VARCHAR2(100);',
' --After validation by "INSEC".val_apex_sql_p, the parameter can be considered secure',
'    SUBTYPE T_SEC_APEX_SQL_P IS',
'        VARCHAR2(100);',
' --A list of APEX parameters should only be built from already validated parameters, or from a well formed, not publicly editable query',
'    TYPE T_APEX_SQL_P_LIST IS',
'        TABLE OF T_SEC_APEX_SQL_P --INDEX BY PLS_INTEGER;',
';',
' -----------------------',
' --All public input SQL fields should be considered insecure',
'    SUBTYPE T_INS_SQL_FIELD IS',
'        VARCHAR2(200);',
' --After validation by "INSEC".val_sql_field, the parameter can be considered secure',
'    SUBTYPE T_SEC_SQL_FIELD IS',
'        T_INS_SQL_FIELD;',
' --A list of SQL field parameters should only be built from already validated parameters, or from a well formed, not publicly editable query',
'    TYPE T_SQL_FIELD_LIST IS',
'        TABLE OF T_SEC_SQL_FIELD --INDEX BY PLS_INTEGER;',
';',
' --In order to use a list of sql fields in a real sql query, the list must be converted to a comma separated string',
'    SUBTYPE T_SQL_FIELD_LIST_AS_Q IS',
'        VARCHAR2(4000);',
' -----------------------',
' --All public input SQL owners should be considered insecure',
'    SUBTYPE T_INS_SQL_OWNER IS',
'        VARCHAR2(100);',
' --After validation by "INSEC".val_sql_owner, the parameter can be considered secure',
'    SUBTYPE T_SEC_SQL_OWNER IS',
'        VARCHAR2(100);',
' -----------------------',
' --All public input SQL source names should be considered insecure',
'    SUBTYPE T_INS_SQL_SOURCE IS',
'        VARCHAR2(100);',
' --After validation by "INSEC".val_sql_source, the parameter can be considered secure',
'    SUBTYPE T_SEC_SQL_SOURCE IS',
'        VARCHAR2(100);',
' --A list of SQL source names should only be built from already validated parameters, or from a well formed, not publicly editable query method',
'    TYPE T_SQL_SOURCE_LIST IS',
'        TABLE OF T_SEC_SQL_SOURCE --INDEX BY PLS_INTEGER;',
';',
' --In order to use a list of sql sources in a real sql query, the list must be converted to a comma separated string',
'    SUBTYPE T_SQL_SOURCE_LIST_AS_Q IS',
'        VARCHAR2(4000);',
' -----------------------',
' --All public input text parameter should be considered unsanitized',
'    SUBTYPE T_UNS_SQL_TEXT IS',
'        VARCHAR2(100);',
' --A text parameter can be considered sanitized (and relatively safe for appending to a dynamic query) after passing through "INSEC".sanitize_passive_sql_text',
'    SUBTYPE T_SAN_SQL_TEXT IS',
'        VARCHAR2(100);',
' -----------------------',
' --When an exposed method supports any input parameter type, this type should be used - and always treated as insecure inside such method. Methods that support at least one parameter of this type should NEVER be directly exposed',
'    SUBTYPE T_INS_LOOSE_SQL_PARAMETER IS',
'        VARCHAR2(100);',
' -----------------------',
' --A Source Alias is a string which identifies a data source. As any input parameter, it should be considered insecure',
'    SUBTYPE T_INS_SA IS',
'        VARCHAR2(300);',
' --After passing through "INSEC".val_sql_field, it can be considered secure',
'    SUBTYPE T_SEC_SA IS',
'        VARCHAR2(300);',
' --A list of SQL source aliases is useful for the sa Push & Pop functionality; it should only be built from already validated parameters, or from a well formed, not publicly editable query',
'    TYPE T_SA_LIST IS',
'        TABLE OF T_SEC_SA;',
' -----------------------',
' --A Field Prefix is a string whose purpose is to be prepended to SQL fields. As any input parameter, it should be considered insecure',
'    SUBTYPE T_INS_SQL_FIELD_PREFIX IS',
'        VARCHAR2(8);',
' --After passing through "INSEC".val_sql_field, it can be considered secure',
'    SUBTYPE T_SEC_SQL_FIELD_PREFIX IS',
'        VARCHAR2(8);',
' -----------------------',
' --SQL and PL/SQL comments are welcome!',
'    SUBTYPE T_SQL_COMMENT IS',
'        VARCHAR2(4000);',
' --------------------------------------------------------',
' -- Public constant declarations',
' -- Public variable declarations',
' -- Public function and procedure declarations',
'END META_TYPE;',
'/',
'',
'CREATE OR REPLACE PACKAGE BODY META_TYPE IS',
' -- Private type declarations',
' -- Private constant declarations',
' -- Private variable declarations',
' -- Function and procedure implementations',
' --begin',
' -- Initialization',
' --<Statement>;',
'END META_TYPE;',
'/',
'',
'',
'',
'DECLARE',
'    L_TABLE_EXISTS NUMBER := 0;',
'BEGIN',
'    SELECT',
'        COUNT(*) INTO L_TABLE_EXISTS',
'    FROM',
'        USER_TABLES',
'    WHERE',
'        TABLE_NAME = ''LANG''',
' --AND OWNER = #OWNER#',
';',
'    IF (L_TABLE_EXISTS != 0) THEN',
'        EXECUTE IMMEDIATE ''DROP TABLE LANG'';',
'    END IF;',
'END;',
'/',
'',
'',
'	create table LANG',
'	(',
'	  lang              NUMBER(6) not null,',
'	  description       VARCHAR2(120) not null,',
'	  webhelp_server    VARCHAR2(200),',
'	  reports_server    VARCHAR2(200),',
'	  webreports_server VARCHAR2(200),',
'	  iso_code          VARCHAR2(6) not null,',
'	  app_server        VARCHAR2(200)',
'	)',
'	tablespace RETAIL_DATA',
'	  pctfree 10',
'	  initrans 6',
'	  maxtrans 255',
'	  storage',
'	  (',
'		 initial 64K',
'		 next 1M',
'		 minextents 1',
'		 maxextents unlimited',
'	  );',
'	-- Add comments to the table ',
'	comment on table LANG',
'	  is ''Contains a list of all the languages used by the system.  This table is created when the system is installed and must be maintained by the database administrator.'';',
'	-- Add comments to the columns ',
'	comment on column LANG.lang',
'	  is ''Contains a number which uniquely identifies a language.'';',
'	comment on column LANG.description',
'	  is ''Contains a description or name for the language.'';',
'	comment on column LANG.webhelp_server',
'	  is ''Contains a web help server for the particular language.'';',
'	comment on column LANG.reports_server',
'	  is ''Contains the name of the reports server for a particular language.'';',
'	comment on column LANG.webreports_server',
'	  is ''Contains the URL of the web reports server.'';',
'	comment on column LANG.iso_code',
'	  is ''This field holds the ISO code associated with the given language.'';',
'	comment on column LANG.app_server',
'	  is ''Application Server'';',
'	-- Create/Recreate indexes ',
'	create index LANG_I1 on LANG (ISO_CODE)',
'	  tablespace RETAIL_INDEX',
'	  pctfree 10',
'	  initrans 12',
'	  maxtrans 255',
'	  storage',
'	  (',
'		 initial 64K',
'		 next 1M',
'		 minextents 1',
'		 maxextents unlimited',
'	  );',
'	-- Create/Recreate primary, unique and foreign key constraints ',
'	alter table LANG',
'	  add constraint PK_LANG primary key (LANG)',
'	  using index ',
'	  tablespace RETAIL_INDEX',
'	  pctfree 10',
'	  initrans 12',
'	  maxtrans 255',
'	  storage',
'	  (',
'		 initial 64K',
'		 next 1M',
'		 minextents 1',
'		 maxextents unlimited',
'	  );',
'',
'',
'',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (1, ''English'', null, null, null, ''EN'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (2, ''German'', null, null, null, ''DE'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (3, ''French'', null, null, null, ''FR'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (4, ''Spanish'', null, null, null, ''ES'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (5, ''Japanese'', null, null, null, ''JA'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (6, ''Korean'', null, null, null, ''KO'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (7, ''Russian'', null, null, null, ''RU'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (8, ''Chinese-Simplified'', null, null, null, ''ZHS'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (9, ''Turkish'', null, null, null, ''TR'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (10, ''Hungarian'', null, null, null, ''HU'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (11, ''Chinese-Traditional'', null, null, null, ''ZHT'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (12, ''Portuguese-Brazil'', null, null, null, ''PTB'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (13, ''Arabic'', null, null, null, ''AR'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (14, ''Canadian French'', null, null, null, ''FRC'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (15, ''Croatian'', null, null, null, ''HR'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (16, ''Czech'', null, null, null, ''CS'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (17, ''Danish'', null, null, null, ''DA'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (18, ''Dutch'', null, null, null, ''NL'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (19, ''Finnish'', null, null, null, ''FI'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (20, ''Greek'', null, null, null, ''EL'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (21, ''Hebrew'', null, null, null, ''HE'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (22, ''Italian'', null, null, null, ''IT'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (23, ''Latin American Spanish'', null, null, null, ''ESA'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (24, ''Lithuanian'', null, null, null, ''LT'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (25, ''Norwegian'', null, null, null, ''NO'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (26, ''Polish'', null, null, null, ''PL'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (27, ''Portuguese'', null, null, null, ''PT'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (28, ''Romanian'', null, null, null, ''RO'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (29, ''Slovak'', null, null, null, ''SK'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (30, ''Slovenian'', null, null, null, ''SL'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (31, ''Swedish'', null, null, null, ''SV'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (32, ''Thai'', null, null, null, ''TH'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (33, ''Albanian'', null, null, null, ''SQ'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (34, ''Latin Bosnian'', null, null, null, ''BS'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (35, ''Bulgarian'', null, null, null, ''BG'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (36, ''Estonian'', null, null, null, ''ET'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (37, ''Latvian'', null, null, null, ''LV'', null);',
'',
'	insert into lang (LANG, DESCRIPTION, WEBHELP_SERVER, REPORTS_SERVER, WEBREPORTS_SERVER, ISO_CODE, APP_SERVER)',
'	values (38, ''Cyrillic Serbian'', null, null, null, ''SR'', null);',
'',
'',
'',
'',
'',
'CREATE OR REPLACE PACKAGE META_DATA IS',
' -- Author  : LJDASILV',
' -- Created : 27-nov-21 19:33:53',
' -- Purpose : Define methods to retrieve global metadata about an application context, such as user, session, language, data format and data type information.',
' -- Public type declarations',
' -- Public constant declarations',
' -- Public variable declarations',
' -- Public function and procedure declarations',
'    FUNCTION GET_SESSION_LANG RETURN NUMBER;',
'    FUNCTION GET_LANG(',
'        P_ISO_CODE IN VARCHAR2',
'    ) RETURN NUMBER;',
'    FUNCTION HDATA_SIZE(',
'        P_BYTES IN NUMBER,',
'        P_DECIMAL IN NUMBER DEFAULT 0',
'    ) RETURN VARCHAR2;',
'    FUNCTION GETQ_WC_LANG_IN RETURN "META_TYPE".T_SEC_SQL_QUERY;',
'    FUNCTION IS_LANG_SUPPORTED(',
'        P_LANG IN "LANG"."LANG"%TYPE',
'    ) RETURN BOOLEAN;',
'    FUNCTION GETQ_LANGS RETURN "META_TYPE".T_SEC_SQL_QUERY;',
'    FUNCTION GET_USER RETURN VARCHAR2;',
'END META_DATA;',
'/',
'',
'create or replace package body META_DATA is',
'',
'  -- Private type declarations',
'',
'  ',
'  -- Private constant declarations',
'',
'',
'  -- Private variable declarations',
'',
'',
'  -- Function and procedure implementations',
'',
'   FUNCTION HDATA_SIZE(p_bytes   IN NUMBER,',
'                       p_decimal IN NUMBER DEFAULT 0) RETURN VARCHAR2 IS',
'      HBYTES VARCHAR2(80);',
'   ',
'   BEGIN',
'   ',
'      HBYTES := CASE',
'                ',
'                   WHEN p_bytes BETWEEN 0 AND 1023 THEN',
'                    p_bytes || '' Bytes''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        2) THEN',
'                    ROUND(p_bytes / 1024,',
'                          p_decimal) || '' KB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        3) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          2),',
'                          p_decimal) || '' MB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        4) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          3),',
'                          p_decimal) || '' GB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        5) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          4),',
'                          p_decimal) || '' TB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        6) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          5),',
'                          p_decimal) || '' PB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        7) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          6),',
'                          p_decimal) || '' EB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        8) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          7),',
'                          p_decimal) || '' ZB''',
'                ',
'                   WHEN p_bytes < POWER(1024,',
'                                        9) THEN',
'                    ROUND(p_bytes / POWER(1024,',
'                                          8),',
'                          p_decimal) || '' YB''',
'                ',
'                   ELSE',
'                   ',
'                    ''Invalid value for bytes''',
'                ',
'                END;',
'   ',
'      RETURN HBYTES;',
'   ',
'   END HDATA_SIZE;',
'',
'   FUNCTION get_session_lang RETURN NUMBER IS',
'   BEGIN',
'      RETURN 1;',
'   END get_session_lang;',
'',
'   FUNCTION get_lang(p_iso_code IN VARCHAR2) RETURN NUMBER IS',
'      l_number NUMBER;',
'   BEGIN',
'      SELECT lang INTO l_number FROM lang WHERE upper(iso_code) = upper(p_iso_code);',
'   ',
'      RETURN l_number;',
'   ',
'   END get_lang;',
'',
'   FUNCTION is_lang_supported(',
'		p_lang IN "LANG"."LANG"%TYPE)',
'		RETURN BOOLEAN',
'		IS',
'      l_valid_lang NUMBER;',
'   BEGIN',
'		EXECUTE IMMEDIATE ''SELECT COUNT(1)',
'  FROM lang',
' WHERE lang = :p_lang',
'   AND '' || "META_DATA".getq_wc_lang_in',
'	 INTO l_valid_lang',
'	USING p_lang;',
'		IF nvl(l_valid_lang,0) > 0 THEN',
'			RETURN TRUE;',
'		ELSE',
'			RETURN FALSE;',
'		END IF;',
'	END is_lang_supported;',
'',
'   FUNCTION getq_wc_lang_in RETURN "META_TYPE".T_SEC_SQL_QUERY IS',
'   ',
'   BEGIN',
'      RETURN q''# lang in (1,12) #'';',
'   ',
'   END getq_wc_lang_in;',
'',
'   FUNCTION getq_langs RETURN "META_TYPE".T_SEC_SQL_QUERY IS',
'   BEGIN',
'      RETURN q''#select lang',
'  from lang',
' where #'' || getq_wc_lang_in;',
'   END getq_langs;',
'',
'   FUNCTION get_user RETURN VARCHAR2 IS',
'   BEGIN',
'      RETURN coalesce(sys_context(''apex$session'',',
'                                  ''app_user''),',
'                      sys_context(''userenv'',',
'                                  ''os_user''),',
'                      sys_context(''userenv'',',
'                                  ''session_user''));',
'   END get_user;',
'',
'',
'',
'',
'--begin',
'  -- Initialization',
'  --<Statement>;',
'end META_DATA;',
'/',
'',
'',
'',
'',
'',
'CREATE OR REPLACE PACKAGE ERROR_PROXY AS',
'',
'',
'   /*=====================================================================',
'   * Exception Definitions',
'   *=====================================================================*/',
'',
'   -------- Common Exceptions (that is, above SQLCODE -20000) ----------',
'',
'   except_insufficient_privileges EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_insufficient_privileges,',
'                         -1031);',
'',
'   except_child_record_found EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_child_record_found,',
'                         -2292);',
'',
'   except_cannot_insert_null EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_cannot_insert_null,',
'                         -1400);',
'',
'   except_no_parent_record_found EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_no_parent_record_found,',
'                         -2291);',
'',
'   except_invalid_sql_name EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_invalid_sql_name,',
'                         -44003);',
'',
'   except_invalid_qualified_sql_name EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_invalid_qualified_sql_name,',
'                         -44004);',
'',
'   except_value_error EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_value_error,',
'                         -6502);',
'',
'   except_table_does_not_exist EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_table_does_not_exist,',
'                         -942);',
'',
'   exc_orig_no_data_found CONSTANT NUMBER := -1403;',
'   exc_no_data_found      CONSTANT NUMBER := -1403;',
'   --except_no_data_found EXCEPTION;',
'   -- PRAGMA EXCEPTION_INIT(except_no_data_found,',
'   --                     -1403);',
'',
'   exc_too_many_rows CONSTANT NUMBER := -1422;',
'   --   except_too_many_rows EXCEPTION;',
'   -- PRAGMA EXCEPTION_INIT(except_too_many_rows,',
'   --                     -1422);',
'',
'   ----------------------------------------------------------------------',
'',
'   -------- Tailored Exceptions (using SQLCODES below -20000) ---------',
'',
'   exc_unhandled_except CONSTANT NUMBER := -20001;',
'   except_unhandled_except EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_unhandled_except,',
'                         exc_unhandled_except);',
'',
'   exc_bad_parameter CONSTANT NUMBER := -20002;',
'   except_bad_parameter EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_bad_parameter,',
'                         exc_bad_parameter);',
'',
'   exc_assertion_failure CONSTANT NUMBER := -20003;',
'   except_assertion_failure EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_assertion_failure,',
'                         exc_assertion_failure);',
'',
'   exc_dependent_parent_record_found CONSTANT NUMBER := -20004;',
'   except_dependent_parent_record_found EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_dependent_parent_record_found,',
'                         exc_dependent_parent_record_found);',
'',
'   exc_required_conditions_missing CONSTANT NUMBER := -20005;',
'   except_required_conditions_missing EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_required_conditions_missing,',
'                         exc_required_conditions_missing);',
'',
'',
'   exc_required_process_failed CONSTANT NUMBER := -20006;',
'   except_required_process_failed EXCEPTION;',
'   PRAGMA EXCEPTION_INIT(except_required_process_failed,',
'                         exc_required_process_failed);',
'',
'',
'   -------------------------------------',
'',
'   FUNCTION apex_error_handling(p_error IN apex_error.t_error)',
'      RETURN apex_error.t_error_result;',
'',
'   -------------------------------------',
'',
'   -------------------------------------',
'   --Source:',
'   --https://stackoverflow.com/questions/9184865/how-to-log-all-exceptions-in-oracle-package/9184923',
'   --Implementation example:',
'   /*',
'   exception',
'      when ERROR_PROXY.assertion_failure_exception then',
'         rollback;',
'         raise;',
'      when others then ',
'         rollback;',
'         v_code := SQLCODE;',
'         v_errm := SUBSTR(SQLERRM, 1, 255);',
'         ERROR_PROXY.throw( ERROR_PROXY.unhandled_except, v_code || '' - '' || v_errm || '' ($Header$)'' );',
'   */',
'',
'   /************************************************************************************',
'   * $Header$',
'   *',
'   * Package: except_pkg',
'   *',
'   * Purpose: Exception handling functionality',
'   *',
'   * Authors: M.McAllister (via AskTom - http://tinyurl.com/c43jt)',
'   *',
'   * Revision History:',
'   *',
'   * $Log[10]$',
'   ******************************************************************************************/',
'',
'   /*=====================================================================',
'   * Constants',
'   *=====================================================================*/',
'',
'   c_INFO  CONSTANT ERROR_MSG.MSG_TYPE%TYPE := ''Informational'';',
'   c_WARN  CONSTANT ERROR_MSG.MSG_TYPE%TYPE := ''Warning'';',
'   c_ERROR CONSTANT ERROR_MSG.MSG_TYPE%TYPE := ''Fatal Error'';',
'   c_DEBUG CONSTANT ERROR_MSG.MSG_TYPE%TYPE := ''Debug'';',
'   c_MAINT CONSTANT ERROR_MSG.MSG_TYPE%TYPE := ''Maintenance'';',
'',
'',
'',
'   /*=====================================================================',
'   * Functions n Procedures',
'   *=====================================================================*/',
'',
'   FUNCTION write_exception_info(p_msg_type    IN ERROR_MSG.msg_type%TYPE,',
'                                 p_obj_name    IN ERROR_MSG.obj_name%TYPE,',
'                                 p_sub_obj     IN ERROR_MSG.sub_obj%TYPE,',
'                                 p_line_no     IN ERROR_MSG.line_no%TYPE,',
'                                 p_error_code  IN ERROR_MSG.err_code%TYPE,',
'                                 p_opt_msg     IN ERROR_MSG.opt_msg%TYPE DEFAULT NULL,',
'                                 p_stack_trace IN ERROR_MSG.stack_trace%TYPE,',
'                                 p_std_err_msg IN ERROR_MSG.obj_name%TYPE)',
'   ',
'    RETURN ERROR_MSG.ID%TYPE;',
'',
'   PROCEDURE write_exception_info(p_msg_type    ERROR_MSG.msg_type%TYPE,',
'                                  p_obj_name    ERROR_MSG.obj_name%TYPE,',
'                                  p_sub_obj     ERROR_MSG.sub_obj%TYPE,',
'                                  p_line_no     ERROR_MSG.line_no%TYPE,',
'                                  p_error_code  ERROR_MSG.err_code%TYPE,',
'                                  p_opt_msg     ERROR_MSG.opt_msg%TYPE DEFAULT NULL,',
'                                  p_stack_trace ERROR_MSG.stack_trace%TYPE,',
'                                  p_std_err_msg ERROR_MSG.obj_name%TYPE);',
'',
'',
'   PROCEDURE throw(p_exception IN NUMBER,',
'                   p_extra_msg IN VARCHAR2 DEFAULT NULL);',
'',
'',
'',
'',
'',
'',
'END ERROR_PROXY;',
'/',
'CREATE OR REPLACE PACKAGE BODY ERROR_PROXY AS',
'',
'   /************************************************************************************',
'   * $Header$',
'   *',
'   * Package: exception_pkg',
'   *',
'   * Purpose: Exception handling functionality',
'   *',
'   * Authors: M.McAllister (via AskTom - http://tinyurl.com/c43jt)',
'   *',
'   * Revision History:',
'   *',
'   * $Log[10]$',
'   ******************************************************************************************/',
'',
'   /*=====================================================================',
'   * Types',
'   *=====================================================================*/',
'',
'   TYPE myArray IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;',
'',
'   /*=====================================================================',
'   * Globals',
'   *=====================================================================*/',
'',
'   err_msg myArray;',
'',
'   /*=====================================================================',
'   * Procedures',
'   *=====================================================================*/',
'',
'   PROCEDURE get_stack_trace(p_stack_trace OUT VARCHAR2,',
'                             p_call_depth  IN NUMBER DEFAULT 5) AS',
'   ',
'      l_call_depth NUMBER := least(utl_call_stack.dynamic_depth,',
'                                   p_call_depth);',
'   ',
'   BEGIN',
'      FOR i IN 1 .. l_call_depth LOOP',
'         p_stack_trace := p_stack_trace || chr(10) || utl_call_stack.unit_line(i) || ''-'' ||',
'                          utl_call_stack.concatenate_subprogram(utl_call_stack.subprogram(i));',
'      ',
'      END LOOP;',
'   ',
'   END get_stack_trace;',
'',
'   /*=====================================================================',
''))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(10609638233420955)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'   * PRIVATE function: get_session_info',
'   * purpose:   Returns a formatted string containing some information',
'   *            about the current session',
'   *=====================================================================*/',
'',
'   FUNCTION get_session_info RETURN VARCHAR2 IS',
'   ',
'      l_sessinfo VARCHAR2(2000);',
'   ',
'   BEGIN',
'   ',
'',
'      begin',
'      execute immediate q''{',
'      SELECT ''[SID = '' || sid || '']'' || '', [SERIAL# = '' || serial# || '']''',
'      --||'', [MACHINE = '' || REPLACE(machine,chr(0),'''') || '']'' ||',
'      --'', [OSUSER = '' || osuser || '']'' ||',
'      --'', [PROGRAM = '' || program || '']'' ||',
'      --'', [LOGON_TIME = '' || to_char(logon_time,''mm/dd/yyyy hh:mi:ss'') || '']''',
'        FROM v$session',
'       WHERE audsid = SYS_CONTEXT(''userenv'',',
'                                  ''sessionid'')}''',
'         INTO l_sessinfo;',
'      exception',
'      when except_table_does_not_exist then',
'    l_sessinfo := ''[SID = null], [SERIAL# = null]'';',
'      end;',
'      ',
'      RETURN l_sessinfo;',
'   ',
'   END get_session_info;',
'',
'   /*=====================================================================',
'   * procedure: write_exception_info',
'   * purpose:   Call the exception logging routine',
'   *=====================================================================*/',
'',
'   PROCEDURE write_exception_info(p_msg_type    IN ERROR_MSG.msg_type%TYPE,',
'                                  p_obj_name    IN ERROR_MSG.obj_name%TYPE,',
'                                  p_sub_obj     IN ERROR_MSG.sub_obj%TYPE,',
'                                  p_line_no     IN ERROR_MSG.line_no%TYPE,',
'                                  p_error_code  IN ERROR_MSG.err_code%TYPE,',
'                                  p_opt_msg     IN ERROR_MSG.opt_msg%TYPE DEFAULT NULL,',
'                                  p_stack_trace IN ERROR_MSG.stack_trace%TYPE,',
'                                  p_std_err_msg IN ERROR_MSG.obj_name%TYPE) IS',
'   ',
'      -- This procedure is autonomous from the calling procedure.',
'      -- i.e The calling procedure does not have to be complete',
'      -- for this procedure to commit its changes.',
'      PRAGMA AUTONOMOUS_TRANSACTION;',
'      l_sessinfo VARCHAR2(2000);',
'      l_user     ERROR_MSG.THE_USER%TYPE := "META_DATA".get_user;',
'   BEGIN',
'   ',
'      l_sessinfo := get_session_info;',
'   ',
'      INSERT INTO error_msg',
'         (the_user,',
'          msg_type,',
'          obj_name,',
'          sub_obj,',
'          line_no,',
'          err_code,',
'          opt_msg,',
'          stack_trace,',
'          std_err_msg,',
'          session_info)',
'      VALUES',
'         (l_user,',
'          p_msg_type,',
'          p_obj_name,',
'          p_sub_obj,',
'          p_line_no,',
'          p_error_code,',
'          p_opt_msg,',
'          p_stack_trace,',
'          p_std_err_msg,',
'          l_sessinfo);',
'   ',
'      COMMIT;',
'   ',
'   EXCEPTION',
'      WHEN OTHERS THEN',
'         -- We don''t want an error logging a message to',
'         -- cause the application to crash',
'         RETURN;',
'      ',
'   END write_exception_info;',
'',
'   FUNCTION write_exception_info(p_msg_type    IN ERROR_MSG.msg_type%TYPE,',
'                                 p_obj_name    IN ERROR_MSG.obj_name%TYPE,',
'                                 p_sub_obj     IN ERROR_MSG.sub_obj%TYPE,',
'                                 p_line_no     IN ERROR_MSG.line_no%TYPE,',
'                                 p_error_code  IN ERROR_MSG.err_code%TYPE,',
'                                 p_opt_msg     IN ERROR_MSG.opt_msg%TYPE DEFAULT NULL,',
'                                 p_stack_trace IN ERROR_MSG.stack_trace%TYPE,',
'                                 p_std_err_msg IN ERROR_MSG.obj_name%TYPE)',
'   ',
'    RETURN ERROR_MSG.ID%TYPE IS',
'   ',
'      -- This function is autonomous from the calling procedure.',
'      -- i.e The calling procedure does not have to be complete',
'      -- for this function to commit its changes.',
'      PRAGMA AUTONOMOUS_TRANSACTION;',
'      l_sessinfo VARCHAR2(2000);',
'      l_error_id ERROR_MSG.id%TYPE;',
'      l_user     ERROR_MSG.THE_USER%TYPE := "META_DATA".get_user;',
'   BEGIN',
'   ',
'      l_sessinfo := get_session_info;',
'   ',
'      INSERT INTO ERROR_MSG',
'         (the_user,',
'          msg_type,',
'          obj_name,',
'          sub_obj,',
'          line_no,',
'          err_code,',
'          opt_msg,',
'          stack_trace,',
'          std_err_msg,',
'          session_info)',
'      VALUES',
'         (l_user,',
'          p_msg_type,',
'          p_obj_name,',
'          p_sub_obj,',
'          p_line_no,',
'          p_error_code,',
'          p_opt_msg,',
'          p_stack_trace,',
'          p_std_err_msg,',
'          l_sessinfo) RETURN id INTO l_error_id;',
'   ',
'      COMMIT;',
'   ',
'      RETURN l_error_id;',
'   ',
'   EXCEPTION',
'      WHEN OTHERS THEN',
'         -- We don''t want an error logging a message to',
'         -- cause the application to crash',
'         RETURN 0;',
'      ',
'   END write_exception_info;',
'',
'   PROCEDURE write_apex_exception_info(p_error IN apex_error.t_error) IS',
'      PRAGMA AUTONOMOUS_TRANSACTION;',
'   ',
'      l_user                 ERROR_MSG.THE_USER%TYPE := "META_DATA".get_user;',
'      l_common_runtime_error VARCHAR2(1) := CASE',
'                                               WHEN p_error.is_common_runtime_error THEN',
'                                                ''Y''',
'                                               ELSE',
'                                                ''N''',
'                                            END;',
'      l_internal_error VARCHAR2(1) := CASE',
'                                         WHEN p_error.is_internal_error THEN',
'                                          ''Y''',
'                                         ELSE',
'                                          ''N''',
'                                      END;',
'   BEGIN',
'      INSERT INTO APEX_ERROR_MSG',
'         (THE_USER,',
'          MESSAGE,',
'          ADDITIONAL_INFO,',
'          DISPLAY_LOCATION,',
'          ASSOCIATION_TYPE,',
'          PAGE_ITEM_NAME,',
'          REGION_ID,',
'          COLUMN_ALIAS,',
'          ROW_NUM,',
'          MODEL_INSTANCE_ID,',
'          MODEL_RECORD_ID,',
'          APEX_ERROR_CODE,',
'          IS_INTERNAL_ERROR,',
'          IS_COMMON_RUNTIME_ERROR,',
'          ORIGINAL_MESSAGE,',
'          ORIGINAL_ADDITIONAL_INFO,',
'          ORA_SQLCODE,',
'          ORA_SQLERRM,',
'          ERROR_BACKTRACE,',
'          ERROR_STATEMENT,',
'          COMPONENT_TYPE,',
'          COMPONENT_ID,',
'          COMPONENT_NAME)',
'      VALUES',
'         (l_user,',
'          p_error.MESSAGE,',
'          p_error.ADDITIONAL_INFO,',
'          p_error.DISPLAY_LOCATION,',
'          p_error.ASSOCIATION_TYPE,',
'          p_error.PAGE_ITEM_NAME,',
'          p_error.REGION_ID,',
'          p_error.COLUMN_ALIAS,',
'          p_error.ROW_NUM,',
'          p_error.MODEL_INSTANCE_ID,',
'          p_error.MODEL_RECORD_ID,',
'          p_error.APEX_ERROR_CODE,',
'          l_internal_error,',
'          l_common_runtime_error,',
'          p_error.ORIGINAL_MESSAGE,',
'          p_error.ORIGINAL_ADDITIONAL_INFO,',
'          p_error.ORA_SQLCODE,',
'          p_error.ORA_SQLERRM,',
'          p_error.ERROR_BACKTRACE,',
'          p_error.ERROR_STATEMENT,',
'          p_error.COMPONENT.TYPE,',
'          p_error.COMPONENT.ID,',
'          p_error.COMPONENT.NAME);',
'   ',
'      COMMIT;',
'   ',
'   END write_apex_exception_info;',
'',
'   FUNCTION write_apex_exception_info(p_error IN apex_error.t_error)',
'      RETURN APEX_ERROR_MSG.ID%TYPE IS',
'   ',
'      PRAGMA AUTONOMOUS_TRANSACTION;',
'   ',
'      l_reference_id         APEX_ERROR_MSG.ID%TYPE;',
'      l_user                 ERROR_MSG.THE_USER%TYPE := "META_DATA".get_user;',
'      l_common_runtime_error VARCHAR2(1) := CASE',
'                                               WHEN p_error.is_common_runtime_error THEN',
'                                                ''Y''',
'                                               ELSE',
'                                                ''N''',
'                                            END;',
'      l_internal_error VARCHAR2(1) := CASE',
'                                         WHEN p_error.is_internal_error THEN',
'                                          ''Y''',
'                                         ELSE',
'                                          ''N''',
'                                      END;',
'   BEGIN',
'      INSERT INTO APEX_ERROR_MSG',
'         (THE_USER,',
'          MESSAGE,',
'          ADDITIONAL_INFO,',
'          DISPLAY_LOCATION,',
'          ASSOCIATION_TYPE,',
'          PAGE_ITEM_NAME,',
'          REGION_ID,',
'          COLUMN_ALIAS,',
'          ROW_NUM,',
'          MODEL_INSTANCE_ID,',
'          MODEL_RECORD_ID,',
'          APEX_ERROR_CODE,',
'          IS_INTERNAL_ERROR,',
'          IS_COMMON_RUNTIME_ERROR,',
'          ORIGINAL_MESSAGE,',
'          ORIGINAL_ADDITIONAL_INFO,',
'          ORA_SQLCODE,',
'          ORA_SQLERRM,',
'          ERROR_BACKTRACE,',
'          ERROR_STATEMENT,',
'          COMPONENT_TYPE,',
'          COMPONENT_ID,',
'          COMPONENT_NAME)',
'      VALUES',
'         (l_user,',
'          p_error.MESSAGE,',
'          p_error.ADDITIONAL_INFO,',
'          p_error.DISPLAY_LOCATION,',
'          p_error.ASSOCIATION_TYPE,',
'          p_error.PAGE_ITEM_NAME,',
'          p_error.REGION_ID,',
'          p_error.COLUMN_ALIAS,',
'          p_error.ROW_NUM,',
'          p_error.MODEL_INSTANCE_ID,',
'          p_error.MODEL_RECORD_ID,',
'          p_error.APEX_ERROR_CODE,',
'          l_internal_error,',
'          l_common_runtime_error,',
'          p_error.ORIGINAL_MESSAGE,',
'          p_error.ORIGINAL_ADDITIONAL_INFO,',
'          p_error.ORA_SQLCODE,',
'          p_error.ORA_SQLERRM,',
'          p_error.ERROR_BACKTRACE,',
'          p_error.ERROR_STATEMENT,',
'          p_error.COMPONENT.TYPE,',
'          p_error.COMPONENT.ID,',
'          p_error.COMPONENT.NAME) RETURN ID INTO l_reference_id;',
'   ',
'      COMMIT;',
'   ',
'      RETURN l_reference_id;',
'   ',
'   ',
'   END write_apex_exception_info;',
'',
'',
'   PROCEDURE throw(p_exception IN NUMBER,',
'                   p_extra_msg IN VARCHAR2 DEFAULT NULL) IS',
'   ',
'      l_owner       VARCHAR2(90);',
'      l_caller_name VARCHAR2(90);',
'      l_caller_type VARCHAR2(30);',
'      l_line_number NUMBER;',
'      l_stack_trace VARCHAR2(4000);',
'      l_exception   NUMBER;',
'   ',
'   BEGIN',
'      OWA_UTIL.WHO_CALLED_ME(owner    => l_owner,',
'                             NAME     => l_caller_name,',
'                             lineno   => l_line_number,',
'                             caller_t => l_caller_type);',
'   ',
'      get_stack_trace(p_stack_trace => l_stack_trace);',
'   ',
'      write_exception_info(p_msg_type    => c_ERROR,',
'                           p_obj_name    => l_owner || ''.'' || l_caller_name,',
'                           p_sub_obj     => NULL,',
'                           p_line_no     => l_line_number,',
'                           p_error_code  => p_exception,',
'                           p_opt_msg     => p_extra_msg,',
'                           p_stack_trace => l_stack_trace,',
'                           p_std_err_msg => err_msg(p_exception));',
'      raise_application_error(p_exception,',
'                              ''Exception at '' || l_caller_type || '' '' || l_owner || ''.'' ||',
'                              l_caller_name || ''('' || l_line_number || ''). '' ||',
'                              err_msg(p_exception) || ''. '' || p_extra_msg,',
'                              TRUE);',
'   ',
'   EXCEPTION',
'      -- we will get this when we have an invalid exception code, one',
'      -- that was not set in the err_msg array below.  The plsql table',
'      -- access will raise the NO-DATA-FOUND exception.  We''ll catch it,',
'      -- verify the exception code is in the valid range for raise_application_error',
'      -- (if not, set to -20000) and then raise the exception with the message',
'      -- "unknown error"',
'   ',
'      WHEN NO_DATA_FOUND THEN',
'         IF (p_exception BETWEEN - 20000 AND - 20999) THEN',
'            l_exception := p_exception;',
'         ELSE',
'            l_exception := -20000;',
'         END IF;',
'      ',
'         write_exception_info(p_msg_type    => c_ERROR,',
'                              p_obj_name    => l_owner || ''.'' || l_caller_name,',
'                              p_sub_obj     => NULL,',
'                              p_line_no     => ''Line '' || l_line_number,',
'                              p_error_code  => p_exception,',
'                              p_opt_msg     => p_extra_msg,',
'                              p_stack_trace => ''Original Stack Trace:'' || chr(10) ||',
'                                               l_stack_trace,',
'                              p_std_err_msg => ''**UNHANDLED ERROR**'');',
'      ',
'         raise_application_error(l_exception,',
'                                 ''Exception at '' || l_caller_type || '' '' || l_owner || ''.'' ||',
'                                 l_caller_name || ''('' || l_line_number || ''). '' ||',
'                                 ''**UNKHANDLED ERROR**'' || ''. '' || p_extra_msg,',
'                                 TRUE);',
'      ',
'   END throw;',
'',
'',
'   -------------------------------------',
'',
'   FUNCTION apex_error_handling(p_error IN apex_error.t_error)',
'      RETURN apex_error.t_error_result IS',
'      --sources:',
'      --https://docs.oracle.com/en/database/oracle/application-express/19.2/aeapi/Example-of-an-Error-Handling-Function.html#GUID-2CD75881-1A59-4787-B04B-9AAEC14E1A82',
'      --https://stackoverflow.com/questions/60960212/oracle-apex-custom-error-messages-for-ig',
'   ',
'      l_result apex_error.t_error_result;',
'   ',
'   ',
'      l_reference_id    NUMBER;',
'      l_constraint_name VARCHAR2(255);',
'   BEGIN',
'      l_result := apex_error.init_error_result(p_error => p_error);',
'   ',
'      -- If it''s an internal error raised by APEX, like an invalid statement or',
'      -- code which can''t be executed, the error text might contain security sensitive',
'      -- information. To avoid this security problem we can rewrite the error to',
'      -- a generic error message and log the original error message for further',
'      -- investigation by the help desk.',
'      IF p_error.is_internal_error THEN',
'         -- mask all errors that are not common runtime errors (Access Denied',
'         -- errors raised by application / page authorization and all errors',
'         -- regarding session and session state)',
'         IF NOT p_error.is_common_runtime_error THEN',
'            -- log error for example with an autonomous transaction and return',
'            -- l_reference_id as reference#',
'            -- l_reference_id := log_error (',
'            --                       p_error => p_error );',
'            --',
'         ',
'            -- Change the message to the generic error message which doesn''t expose',
'            -- any sensitive information.',
'         ',
'         ',
'            l_reference_id := write_apex_exception_info(p_error);',
'         ',
'         ',
'         ',
'            l_result.message         := ''An unexpected internal application error has occurred. '' ||',
'                                        ''Please get in contact with Oracle and provide '' ||',
'                                        ''reference# '' ||',
'                                        to_char(l_reference_id,',
'                                                ''999G999G999G990'') ||',
'                                        '' for further investigation.'';',
'            l_result.additional_info := NULL;',
'         END IF;',
'      ELSE',
'         -- Always show the error as inline error',
'         -- Note: If you have created manual tabular forms (using the package',
'         --       apex_item/htmldb_item in the SQL statement) you should still',
'         --       use "On error page" on that pages to avoid loosing entered data',
'         l_result.display_location := CASE',
'                                         WHEN l_result.display_location =',
'                                              apex_error.c_on_error_page THEN',
'                                          apex_error.c_inline_in_notification',
'                                         ELSE',
'                                          l_result.display_location',
'                                      END;',
'      ',
'         --',
'         -- Note: If you want to have friendlier ORA error messages, you can also define',
'         --       a text message with the name pattern APEX.ERROR.ORA-number',
'         --       There is no need to implement custom code for that.',
'         --',
'      ',
'         -- If it''s a constraint violation like',
'         --',
'         --   -) ORA-00001: unique constraint violated',
'         --   -) ORA-01031: insufficient privileges',
'         --   -) ORA-02091: transaction rolled back (-> can hide a deferred constraint)',
'         --   -) ORA-02290: check constraint violated',
'         --   -) ORA-02291: integrity constraint violated - parent key not found',
'         --   -) ORA-02292: integrity constraint violated - child record found',
'         --   -) ORA-01400: cannot insert null into (string)',
'         --',
'         -- we try to get a friendly error message from our constraint lookup configuration.',
'         -- If we don''t find the constraint in our lookup table we fallback to',
'         -- the original ORA error message.',
'         IF p_error.ora_sqlcode IN (-1,',
'                                    -1031,',
'                                    -2091,',
'                                    -2290,',
'                                    -2291,',
'                                    -2292,',
'                                    -1400) THEN',
'            l_constraint_name := apex_error.extract_constraint_name(p_error => p_error);',
'         ',
'         ',
'            --ORA001: Begin',
'            --Based on: https://roelhartman.blogspot.com/2021/02/stop-using-validations-for-checking.html',
'            --changing this:',
'            /* ',
'              begin',
'                   select message',
'                     into l_result.message',
'                     from constraint_lookup',
'                    where constraint_name = l_constraint_name;',
'               exception when no_data_found then null; -- not every constraint has to be in our lookup table',
'               end;',
'            */',
'            --to this:',
'            l_result.message := apex_lang.message(nvl(l_constraint_name,',
'                                                      p_error.message));',
'         ',
'            IF l_result.message = nvl(l_constraint_name,',
'                                      upper(p_error.message)) THEN',
'               apex_lang.create_message(p_application_id => v(''APP_ID''),',
'                                        p_name           => NVL(l_constraint_name,',
'                                                                p_error.message),',
'                                        p_language       => ''en'', --apex_util.get_preference(''FSP_LANGUAGE_PREFERENCE''),',
'                                        p_message_text   => CASE',
'                                                               WHEN err_msg.EXISTS(p_error.ora_sqlcode) THEN',
'                                                                err_msg(p_error.ora_sqlcode)',
'                                                               WHEN l_constraint_name IS NULL THEN',
'                                                                initcap(regexp_replace(p_error.message,',
'                                                                                                                  ''ORA-[[:digit:]]*:\s+'',',
'                                                                                                                  ''''))',
'                                                               ELSE',
'                                                                ''Invalid Action''',
'                                                            END);',
'               COMMIT;',
'            END IF;',
'            --ORA001: End',
'         ',
'         END IF;',
'      ',
'         -- If an ORA error has been raised, for example a raise_application_error(-20xxx, ''...'')',
'         -- in a table trigger or in a PL/SQL package called by a process and we',
'         -- haven''t found the error in our lookup table, then we just want to see',
'         -- the actual error text and not the full error stack with all the ORA error numbers.',
'         IF p_error.ora_sqlcode IS NOT NULL AND l_result.message = p_error.message THEN',
'            l_result.message := apex_error.get_first_ora_error_text(p_error => p_error);',
'         END IF;',
'      ',
'         -- If no associated page item/tabular form column has been set, we can use',
'         -- apex_error.auto_set_associated_item to automatically guess the affected',
'         -- error field by examine the ORA error for constraint names or column names.',
'         IF l_result.page_item_name IS NULL AND l_result.column_alias IS NULL THEN',
'            apex_error.auto_set_associated_item(p_error        => p_error,',
'                                                p_error_result => l_result);',
'         END IF;',
'      ',
'         IF NOT p_error.is_common_runtime_error THEN',
'            write_apex_exception_info(p_error);',
'         END IF;',
'      ',
'      END IF;',
'   ',
'      RETURN l_result;',
'   END apex_error_handling;',
'',
'',
'',
'BEGIN',
'',
'   -- This code is run once per session when this package is first touched',
'',
'   err_msg(exc_unhandled_except) := ''Unhandled exception'';',
'   err_msg(exc_bad_parameter) := ''Invalid parameter passed into function or procedure'';',
'   err_msg(exc_assertion_failure) := ''Program execution stopped due to assertion failure'';',
'   err_msg(exc_dependent_parent_record_found) := ''Cannot delete parameter, as at least one parent record was found'';',
'   err_msg(exc_required_conditions_missing) := ''Not all the required conditions were met for this process to execute'';',
'   err_msg(exc_required_process_failed) := ''A mandatory previous process failed during its execution'';',
'',
'END ERROR_PROXY;',
'/',
''))
);
wwv_flow_imp.component_end;
end;
/
