prompt --application/deployment/install/install_apex_apps_rest
begin
--   Manifest
--     INSTALL: INSTALL-APEX_APPS_REST
--   Manifest End
wwv_flow_imp.component_begin (
 p_version_yyyy_mm_dd=>'2024.05.31'
,p_release=>'24.1.4'
,p_default_workspace_id=>8352453064037036
,p_default_application_id=>102
,p_default_id_offset=>9614839888637612
,p_default_owner=>'WKSP_VDDEV'
);
wwv_flow_imp_shared.create_install_script(
 p_id=>wwv_flow_imp.id(17846507856509139)
,p_install_id=>wwv_flow_imp.id(10220519673453005)
,p_name=>'APEX_APPS_REST'
,p_sequence=>50
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'create or replace package apex_apps_rest ',
'is',
'--',
'-- This is the name of the ORDS REST Module',
'--',
'c_ords_module_name constant varchar2(16) := ''apex.apps.expimp'';',
'function clob_to_blob( ',
'    p_clob in clob ) ',
'    return blob;',
'',
'function blob_to_clob( ',
'    p_blob in blob ) ',
'    return clob ;',
'',
'--=============================================================================',
'-- exports an application or application components, as SQL or ZIP file.',
'--',
'-- Parameters:',
'-- * p_application_file   Application ID to be exported; append ".zip" or ".sql"',
'--                        to determine the file type.',
'-- * p_components         Only export the specified components; use syntax',
'--                        of APEX_EXPORT.GET_APPLICATION procedure; components',
'--                        separated by comma.',
'-- * p_mimetype           mimetype of the expected target file. Supports .sql or .zip',
'--                        and .json in the future. Overrides the suffix specified',
'--                        in p_application_file.',
'--=============================================================================',
'procedure export( ',
'    p_application_file in varchar2,',
'    p_components       in varchar2,',
'    p_mimetype         in varchar2 );',
'',
'procedure my_sql_export( ',
'    p_application_file in varchar2',
');',
'--=============================================================================',
'-- imports an application or application components, as SQL or ZIP file.',
'--',
'-- Parameters:',
'-- * p_export_file        Export file',
'-- * p_mimetype           Mime Type of the export file, to determine whether ',
'--                        this is ZIP or SQL',
'-- * p_application_id     Import file as this application ID',
'-- * p_to_workspace       if provided, import into this workspace',
'--=============================================================================',
'procedure import( ',
'    p_export_file    in blob, ',
'    p_mimetype       in varchar2,',
'    p_to_workspace   in varchar2 default null,',
'    p_application_id in number   default null );',
'',
'procedure my_sql_import( ',
'    p_export_file    in blob, ',
'    p_to_workspace   in varchar2 default null,',
'    p_application_id in number default null);',
'--=============================================================================',
'-- deletes an application.',
'--',
'-- Parameters:',
'-- * p_in_workspace       if provided, delete application in this workspace',
'-- * p_application_id     Application ID to be deleted; extension will be ignored.',
'--=============================================================================',
'procedure delete( ',
'    p_in_workspace   in varchar2 default null,',
'    p_application_id in number );',
'end apex_apps_rest;',
'/',
'create or replace package body apex_apps_rest ',
'is',
'LF constant varchar2(1) := chr( 10 );',
'--=============================================================================',
'-- Helper Function: Convert a CLOB to a BLOB',
'--=============================================================================',
'function clob_to_blob( ',
'    p_clob in clob ) ',
'    return blob ',
'is',
'    l_blob      blob;',
'    l_dstoff    pls_integer := 1;',
'    l_srcoff    pls_integer := 1;',
'    l_lngctx    pls_integer := 0;',
'    l_warn      pls_integer;',
'begin',
'    sys.dbms_lob.createtemporary( ',
'        lob_loc     => l_blob,',
'        cache       => true,',
'        dur         => sys.dbms_lob.call );    ',
'    sys.dbms_lob.converttoblob(',
'        dest_lob     => l_blob,',
'        src_clob     => p_clob,',
'        amount       => sys.dbms_lob.lobmaxsize,',
'        dest_offset  => l_dstoff,',
'        src_offset   => l_srcoff,',
'        blob_csid    => nls_charset_id( ''AL32UTF8'' ),',
'        lang_context => l_lngctx,',
'        warning      => l_warn );',
'    return l_blob;',
'end clob_to_blob;',
'--=============================================================================',
'-- Helper Function: Convert a BLOB to a CLOB',
'--=============================================================================',
'function blob_to_clob( ',
'    p_blob in blob ) ',
'    return clob ',
'is',
'    l_clob      clob;',
'    l_dstoff    pls_integer := 1;',
'    l_srcoff    pls_integer := 1;',
'    l_lngctx    pls_integer := 0;',
'    l_warn      pls_integer;',
'begin',
'    sys.dbms_lob.createtemporary( ',
'        lob_loc     => l_clob,',
'        cache       => true,',
'        dur         => sys.dbms_lob.call );    ',
'    sys.dbms_lob.converttoclob(',
'        dest_lob     => l_clob,',
'        src_blob     => p_blob,',
'        amount       => sys.dbms_lob.lobmaxsize,',
'        dest_offset  => l_dstoff,',
'        src_offset   => l_srcoff,',
'        blob_csid    => nls_charset_id( ''AL32UTF8'' ),',
'        lang_context => l_lngctx,',
'        warning      => l_warn );',
'    return l_clob;',
'end blob_to_clob;',
'--=============================================================================',
'-- split filename to file name and extension',
'--=============================================================================',
'procedure split_filename(',
'    p_full_filename  in varchar2,',
'    p_filename      out varchar2,',
'    p_extension     out varchar2 )',
'is',
'begin',
'    if instr( p_full_filename, ''.'' ) > 0 then',
'        p_filename  := substr( p_full_filename, 1, instr( p_full_filename, ''.'' ) - 1 );',
'        p_extension := lower( substr( p_full_filename, instr( p_full_filename, ''.'' ) + 1 ) );',
'    else',
'        p_filename := p_full_filename;',
'    end if;',
'end split_filename;',
'--=============================================================================',
'-- sets workspace to specified workspace, or to first workspace assigned to',
'-- current schema',
'--=============================================================================',
'procedure set_workspace( p_workspace in varchar2 ) ',
'is',
'begin',
'    if p_workspace is not null then',
'        apex_util.set_workspace( p_workspace );',
'    else ',
'        for w in (',
'            select workspace',
'              from apex_workspaces',
'             where rownum = 1 )',
'        loop',
'            apex_util.set_workspace( w.workspace );',
'        end loop;',
'    end if;',
'end set_workspace;',
'--=============================================================================',
'-- Public API, see specification',
'--=============================================================================',
'procedure delete( ',
'    p_in_workspace   in varchar2 default null,',
'    p_application_id in number )',
'is',
'begin',
'    set_workspace( p_workspace => p_in_workspace );',
'    apex_application_install.remove_application( p_application_id => p_application_id );',
'end delete;',
'--=============================================================================',
'-- Public API, see specification',
'--=============================================================================',
'procedure export( ',
'    p_application_file in varchar2,',
'    p_components       in varchar2,',
'    p_mimetype         in varchar2 )',
'is',
'    l_files       apex_t_export_files;',
'    l_filename    varchar2(255);',
'    l_extension   varchar2(255);',
'    l_components  apex_t_varchar2;',
'    l_blob        blob;',
'    l_as_zip      boolean;',
'begin',
'    split_filename( ',
'        p_full_filename => p_application_file,',
'        p_filename      => l_filename,',
'        p_extension     => l_extension );',
'    l_as_zip := case when p_mimetype is null ',
'                    then coalesce( l_extension = ''zip'', false )',
'                    else coalesce( lower( p_mimetype ) = ''application/zip'', false )',
'                end;',
'    if p_components is not null then',
'        l_components := apex_string.split( ltrim(rtrim( p_components ) ) , '','' );',
'    end if;',
'    l_files := apex_export.get_application( ',
'                   p_application_id => to_number( l_filename ),',
'                   p_components     => l_components,',
'                   p_split          => l_as_zip,',
'                   p_with_date                 => FALSE, ',
'                   p_with_ir_public_reports    => TRUE, ',
'                   p_with_ir_private_reports   => TRUE, ',
'                   p_with_ir_notifications     => TRUE, ',
'                   p_with_translations         => TRUE, ',
'                   p_with_pkg_app_mapping      => TRUE, ',
'                   p_with_original_ids         => TRUE, ',
'                   p_with_no_subscriptions     => FALSE, ',
'                   p_with_comments             => FALSE, ',
'                   p_with_supporting_objects   => ''Y'', ',
'                   p_with_acl_assignments      => FALSE);',
'    --',
'    sys.dbms_lob.createtemporary( ',
'        lob_loc     => l_blob,',
'        cache       => true,',
'        dur         => sys.dbms_lob.call );',
'        ',
'    if l_as_zip then',
'        for i in 1 .. l_files.count loop',
'            apex_zip.add_file (',
'                p_zipped_blob => l_blob,',
'                p_file_name   => l_files(i).name,',
'                p_content     => clob_to_blob( l_files(i).contents ) );',
'        end loop;',
'        apex_zip.finish( l_blob );',
'        sys.owa_util.mime_header( ''application/zip'', false );',
'    else ',
'        l_blob := clob_to_blob( l_files(1).contents );',
'        sys.owa_util.mime_header( ''application/sql'', false );',
'    end if;',
'    sys.htp.p( ''Content-Length: '' || sys.dbms_lob.getlength( l_blob ) );',
'    sys.htp.p( ''Content-Disposition: attachment; filename='' || l_filename || ''.'' || case when l_as_zip then ''zip'' else ''sql'' end );',
'    sys.owa_util.http_header_close;',
'    sys.wpg_docload.download_file( l_blob );',
'    -- apex_application.stop_apex_engine;',
'end export;',
'--=============================================================================',
'-- Public API, see specification',
'--=============================================================================',
'procedure my_sql_export( ',
'    p_application_file in varchar2',
') ',
'is',
'    l_files       apex_t_export_files;',
'    l_blob        blob;',
'begin',
'    l_files := apex_export.get_application( ',
'                   p_application_id => to_number( p_application_file ),',
'                   p_components     => null,',
'                   p_split          => false );  ',
'    --',
'    /*sys.dbms_lob.createtemporary( ',
'        lob_loc     => l_blob,',
'        cache       => true,',
'        dur         => sys.dbms_lob.call );  */',
'    --',
'    --l_blob := clob_to_blob( l_files(1).contents );',
'    /*sys.owa_util.mime_header( ''application/sql'', false );',
'    sys.htp.p( ''Content-Length: '' || sys.dbms_lob.getlength( l_blob ) );',
'    sys.htp.p( ''Content-Disposition: attachment; filename='' || p_application_file || ''.'' || ''sql'' );',
'    sys.owa_util.http_header_close;',
'    sys.wpg_docload.download_file( l_blob );',
'    apex_application.stop_apex_engine;*/',
'    --',
'end my_sql_export;',
'--=============================================================================',
'-- Public API, see specification',
'--=============================================================================',
'procedure import( ',
'    p_export_file    in blob, ',
'    p_mimetype       in varchar2,',
'    p_to_workspace   in varchar2 default null,',
'    p_application_id in number   default null )',
'is',
'    l_files         apex_t_export_files := apex_t_export_files();',
'    l_zip_files     apex_zip.t_files;',
'    --',
'    l_dstoff        pls_integer := 1;',
'    l_srcoff        pls_integer := 1;',
'    l_lngctx        pls_integer := 0;',
'    l_warn          pls_integer;',
'begin',
'    set_workspace( p_workspace => p_to_workspace );',
'    if lower( p_mimetype ) = ''application/zip'' then',
'        l_zip_files := apex_zip.get_files( ',
'                           p_zipped_blob => p_export_file,',
'                           p_only_files  => true );',
'        l_files.extend( l_zip_files.count );',
'        for i in 1 .. l_zip_files.count loop',
'            l_files( i ) := apex_t_export_file( ',
'                                l_zip_files( i ),',
'                                blob_to_clob( ',
'                                    apex_zip.get_file_content( ',
'                                        p_zipped_blob => p_export_file,',
'                                        p_file_name   => l_zip_files( i ) ) ) );',
'        end loop;',
'    else ',
'        l_files.extend(1);',
'        l_files( 1 ) := apex_t_export_file( ''import-data.sql'', blob_to_clob( p_export_file ) );',
'    end if;',
'    apex_application_install.set_application_id( ',
'        p_application_id => p_application_id );',
'    apex_application_install.install( ',
'        p_source             => l_files,',
'        p_overwrite_existing => true );',
'end import;',
'--=============================================================================',
'-- Public API, see specification',
'--=============================================================================',
'procedure my_sql_import( ',
'    p_export_file    in blob, ',
'    p_to_workspace   in varchar2 default null,',
'    p_application_id in number default null)',
'is',
'    l_files         apex_t_export_files := apex_t_export_files();',
'    --',
'begin',
'    apex_util.set_workspace( p_workspace => p_to_workspace );',
'    --',
'    l_files.extend(1);',
'    l_files(1) := apex_t_export_file( ''import-data.sql'', blob_to_clob( p_export_file ) );',
'    --',
'    apex_application_install.set_application_id( ',
'        p_application_id => p_application_id );',
'    --',
'    apex_application_install.set_auto_install_sup_obj(',
'        p_auto_install_sup_obj => true);',
'    --',
'    apex_application_install.install( ',
'        p_source             => l_files,',
'        p_overwrite_existing => true );',
'    --',
'end my_sql_import;',
'',
'end apex_apps_rest;',
'/ '))
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(17846634367509135)
,p_script_id=>wwv_flow_imp.id(17846507856509139)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'APEX_APPS_REST'
);
wwv_flow_imp.component_end;
end;
/
