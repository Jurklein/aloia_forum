prompt --application/deployment/install/install_log_dbg
begin
--   Manifest
--     INSTALL: INSTALL-LOG_DBG
--   Manifest End
wwv_flow_imp.component_begin (
 p_version_yyyy_mm_dd=>'2024.05.31'
,p_release=>'24.1.4'
,p_default_workspace_id=>8352453064037036
,p_default_application_id=>102
,p_default_id_offset=>9614839888637612
,p_default_owner=>'WKSP_VDDEV'
);
wwv_flow_imp_shared.create_install_script(
 p_id=>wwv_flow_imp.id(10609872584425119)
,p_install_id=>wwv_flow_imp.id(10220519673453005)
,p_name=>'LOG_DBG'
,p_sequence=>25
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'DECLARE',
'    L_TABLE_EXISTS NUMBER := 0;',
'BEGIN',
'    SELECT',
'        COUNT(*) INTO L_TABLE_EXISTS',
'    FROM',
'        USER_TABLES',
'    WHERE',
'        TABLE_NAME = ''DBG_LOG''',
' --AND OWNER = #OWNER#',
';',
'    IF (L_TABLE_EXISTS != 0) THEN',
'        EXECUTE IMMEDIATE ''DROP TABLE DBG_LOG'';',
'    END IF;',
'END;',
'/',
'',
'-- create tables',
'CREATE TABLE DBG_LOG (',
'    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT DBG_LOG_ID__PK PRIMARY KEY,',
'    MSG VARCHAR2(4000 CHAR),',
'    NUM NUMBER,',
'    THE_DATE DATE DEFAULT ON NULL SYSDATE,',
'    THE_USER VARCHAR2(4000 CHAR) DEFAULT ON NULL USER',
');',
'',
'/',
'',
'CREATE OR REPLACE PACKAGE "LOG_DBG" IS',
' /*',
'   This is the API for the table "DBG_LOG" with column ID generated BY DEFAULT ON NULL as identity.',
'   ',
'   GENERATION OPTIONS',
'   - Must be in the lines 5-42 to be reusable by the generator',
'   - DO NOT TOUCH THIS until you know what you do',
'   - Read the docs under github.com/OraMUC/table-api-generator ;-)',
'   <options',
'     generator="OM_TAPIGEN"',
'     generator_version="0.6.0"',
'     generator_action="COMPILE_API"',
'     generated_at="2021-11-17 14:53:55"',
'     generated_by="LJDASILV"',
'     p_table_name="DBG_LOG"',
'     p_owner="RMS19"',
'     p_enable_insertion_of_rows="TRUE"',
'     p_enable_column_defaults="TRUE"',
'     p_enable_update_of_rows="FALSE"',
'     p_enable_deletion_of_rows="TRUE"',
'     p_enable_parameter_prefixes="FALSE"',
'     p_enable_proc_with_out_params="TRUE"',
'     p_enable_getter_and_setter="TRUE"',
'     p_col_prefix_in_method_names="TRUE"',
'     p_return_row_instead_of_pk="TRUE"',
'     p_double_quote_names="TRUE"',
'     p_default_bulk_limit="1000"',
'     p_enable_dml_view="TRUE"',
'     p_dml_view_name="DBG_LOG_DML_V"',
'     p_dml_view_trigger_name="DBG_LOG_IOIUD"',
'     p_enable_one_to_one_view="FALSE"',
'     p_one_to_one_view_name="DBG_LOG_V"',
'     p_api_name="DBG_LOG"',
'     p_sequence_name=""',
'     p_exclude_column_list="ID"',
'     p_audit_column_mappings="created=THE_DATE, created_by=THE_USER"',
'     p_audit_user_expression="coalesce(sys_context(''apex$session'',''app_user''), sys_context(''userenv'',''os_user''), sys_context(''userenv'',''session_user''))"',
'     p_row_version_column_mapping=""',
'     p_tenant_column_mapping=""',
'     p_enable_custom_defaults="TRUE"',
'     p_custom_default_values=""/>',
'   */',
'    TYPE T_ROWS_TAB IS',
'        TABLE OF "DBG_LOG"%ROWTYPE;',
'    TYPE T_STRONG_REF_CURSOR IS',
'        REF CURSOR RETURN "DBG_LOG"%ROWTYPE;',
'    FUNCTION BULK_IS_COMPLETE RETURN BOOLEAN;',
'    PROCEDURE SET_BULK_LIMIT(',
'        P_BULK_LIMIT IN PLS_INTEGER',
'    );',
'    FUNCTION GET_BULK_LIMIT RETURN PLS_INTEGER;',
'    FUNCTION ROW_EXISTS(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN BOOLEAN;',
'    FUNCTION ROW_EXISTS_YN(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN VARCHAR2;',
'    PROCEDURE GO(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    );',
'    FUNCTION CREATE_ROW(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    ) RETURN "DBG_LOG"%ROWTYPE;',
'    PROCEDURE CREATE_ROW(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    );',
'    FUNCTION CREATE_ROW(',
'        P_ROW IN "DBG_LOG"%ROWTYPE',
'    ) RETURN "DBG_LOG"%ROWTYPE;',
'    PROCEDURE CREATE_ROW(',
'        P_ROW IN "DBG_LOG"%ROWTYPE',
'    );',
'    FUNCTION CREATE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    ) RETURN T_ROWS_TAB;',
'    PROCEDURE CREATE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    );',
'    FUNCTION READ_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"%ROWTYPE;',
'    PROCEDURE READ_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/,',
'        MSG OUT NOCOPY "DBG_LOG"."MSG"%TYPE,',
'        NUM OUT NOCOPY "DBG_LOG"."NUM"%TYPE,',
'        THE_DATE OUT NOCOPY "DBG_LOG"."THE_DATE"%TYPE,',
'        THE_USER OUT NOCOPY "DBG_LOG"."THE_USER"%TYPE',
'    );',
'    FUNCTION READ_ROWS(',
'        P_REF_CURSOR IN T_STRONG_REF_CURSOR',
'    ) RETURN T_ROWS_TAB;',
'    PROCEDURE DELETE_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    );',
'    PROCEDURE DELETE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    );',
'    FUNCTION GET_MSG(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."MSG"%TYPE;',
'    FUNCTION GET_NUM(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."NUM"%TYPE;',
'    FUNCTION GET_THE_DATE(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."THE_DATE"%TYPE;',
'    FUNCTION GET_THE_USER(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."THE_USER"%TYPE;',
' /*',
'  You can simply copy over the defaults to your generator call - the attribute "source" is ignored then.',
'      <custom_defaults>',
'    <column source="TAPIGEN" name="MSG"><![CDATA[sys.dbms_random.string(''A'', round(sys.dbms_random.value(1, 4000)))]]></column>',
'    <column source="TAPIGEN" name="NUM"><![CDATA[round(sys.dbms_random.value(0, 999999999999), 0)]]></column>',
'    </custom_defaults>',
'  */',
'END "LOG_DBG";',
'/',
'',
'CREATE OR REPLACE PACKAGE BODY "LOG_DBG" IS',
' /*',
'   This is the API for the table "DBG_LOG" with column ID generated BY DEFAULT ON NULL as identity.',
'   - generator: OM_TAPIGEN',
'   - generator_version: 0.6.0',
'   - generator_action: COMPILE_API',
'   - generated_at: 2021-11-17 14:53:55',
'   - generated_by: LJDASILV',
'   */',
'    G_BULK_LIMIT     PLS_INTEGER := 1000;',
'    G_BULK_COMPLETED BOOLEAN := FALSE;',
'    FUNCTION BULK_IS_COMPLETE RETURN BOOLEAN IS',
'    BEGIN',
'        RETURN G_BULK_COMPLETED;',
'    END BULK_IS_COMPLETE;',
'    PROCEDURE SET_BULK_LIMIT(',
'        P_BULK_LIMIT IN PLS_INTEGER',
'    ) IS',
'    BEGIN',
'        G_BULK_LIMIT := P_BULK_LIMIT;',
'    END SET_BULK_LIMIT;',
'    FUNCTION GET_BULK_LIMIT RETURN PLS_INTEGER IS',
'    BEGIN',
'        RETURN G_BULK_LIMIT;',
'    END GET_BULK_LIMIT;',
'    FUNCTION ROW_EXISTS(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN BOOLEAN IS',
'        V_RETURN BOOLEAN := FALSE;',
'        V_DUMMY  PLS_INTEGER;',
'        CURSOR CUR_BOOL IS',
'            SELECT',
'                1',
'            FROM',
'                "DBG_LOG"',
'            WHERE',
'                "ID" = ID;',
'    BEGIN',
'        OPEN CUR_BOOL;',
'        FETCH CUR_BOOL INTO V_DUMMY;',
'        IF CUR_BOOL%FOUND THEN',
'            V_RETURN := TRUE;',
'        END IF;',
'        CLOSE CUR_BOOL;',
'        RETURN V_RETURN;',
'    END;',
'    FUNCTION ROW_EXISTS_YN(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN VARCHAR2 IS',
'    BEGIN',
'        RETURN CASE WHEN ROW_EXISTS(',
'            ID => ID',
'        ) THEN ''Y'' ELSE ''N'' END;',
'    END;',
'    PROCEDURE GO(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    ) IS',
'        PRAGMA AUTONOMOUS_TRANSACTION;',
'    BEGIN',
'        CREATE_ROW(',
'            MSG => MSG,',
'            NUM => NUM',
'        );',
'        COMMIT;',
'    END GO;',
'    FUNCTION CREATE_ROW(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    ) RETURN "DBG_LOG"%ROWTYPE IS',
'        V_RETURN "DBG_LOG"%ROWTYPE;',
'    BEGIN',
'        INSERT INTO "DBG_LOG" (',
'            "MSG",',
'            "NUM",',
'            "THE_DATE",',
'            "THE_USER"',
'        ) VALUES (',
'            MSG,',
'            NUM,',
'            SYSDATE,',
'            COALESCE(SYS_CONTEXT(''apex$session'', ''app_user''), SYS_CONTEXT(''userenv'', ''os_user''), SYS_CONTEXT(''userenv'', ''session_user''))',
'        ) RETURN "ID" /*PK*/, "MSG", "NUM", "THE_DATE", "THE_USER" INTO V_RETURN;',
'        RETURN V_RETURN;',
'    END CREATE_ROW;',
'    PROCEDURE CREATE_ROW(',
'        MSG IN "DBG_LOG"."MSG"%TYPE DEFAULT NULL,',
'        NUM IN "DBG_LOG"."NUM"%TYPE DEFAULT NULL',
'    ) IS',
'    BEGIN',
'        INSERT INTO "DBG_LOG" (',
'            "MSG",',
'            "NUM",',
'            "THE_DATE",',
'            "THE_USER"',
'        ) VALUES (',
'            MSG,',
'            NUM,',
'            SYSDATE,',
'            COALESCE(SYS_CONTEXT(''apex$session'', ''app_user''), SYS_CONTEXT(''userenv'', ''os_user''), SYS_CONTEXT(''userenv'', ''session_user''))',
'        );',
'    END CREATE_ROW;',
'    FUNCTION CREATE_ROW(',
'        P_ROW IN "DBG_LOG"%ROWTYPE',
'    ) RETURN "DBG_LOG"%ROWTYPE IS',
'    BEGIN',
'        RETURN CREATE_ROW(',
'            MSG => P_ROW."MSG",',
'            NUM => P_ROW."NUM"',
'        );',
'    END CREATE_ROW;',
'    PROCEDURE CREATE_ROW(',
'        P_ROW IN "DBG_LOG"%ROWTYPE',
'    ) IS',
'    BEGIN',
'        CREATE_ROW(',
'            MSG => P_ROW."MSG",',
'            NUM => P_ROW."NUM"',
'        );',
'    END CREATE_ROW;',
'    FUNCTION CREATE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    ) RETURN T_ROWS_TAB IS',
'        V_RETURN T_ROWS_TAB;',
'    BEGIN',
'        FORALL I IN INDICES OF P_ROWS_TAB',
'            INSERT INTO "DBG_LOG" (',
'                "MSG",',
'                "NUM",',
'                "THE_DATE",',
'                "THE_USER"',
'            ) VALUES (',
'                P_ROWS_TAB(I)."MSG",',
'                P_ROWS_TAB(I)."NUM",',
'                SYSDATE,',
'                COALESCE(SYS_CONTEXT(''apex$session'', ''app_user''), SYS_CONTEXT(''userenv'', ''os_user''), SYS_CONTEXT(''userenv'', ''session_user''))',
'            ) RETURN "ID" /*PK*/, "MSG", "NUM", "THE_DATE", "THE_USER" BULK COLLECT INTO V_RETURN;',
'        RETURN V_RETURN;',
'    END CREATE_ROWS;',
'    PROCEDURE CREATE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    ) IS',
'    BEGIN',
'        FORALL I IN INDICES OF P_ROWS_TAB',
'            INSERT INTO "DBG_LOG" (',
'                "MSG",',
'                "NUM",',
'                "THE_DATE",',
'                "THE_USER"',
'            ) VALUES (',
'                P_ROWS_TAB(I)."MSG",',
'                P_ROWS_TAB(I)."NUM",',
'                SYSDATE,',
'                COALESCE(SYS_CONTEXT(''apex$session'', ''app_user''), SYS_CONTEXT(''userenv'', ''os_user''), SYS_CONTEXT(''userenv'', ''session_user''))',
'            );',
'    END CREATE_ROWS;',
'    FUNCTION READ_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"%ROWTYPE IS',
'        V_ROW "DBG_LOG"%ROWTYPE;',
'        CURSOR CUR_ROW IS',
'            SELECT',
'                *',
'            FROM',
'                "DBG_LOG"',
'            WHERE',
'                "ID" = ID;',
'    BEGIN',
'        OPEN CUR_ROW;',
'        FETCH CUR_ROW INTO V_ROW;',
'        CLOSE CUR_ROW;',
'        RETURN V_ROW;',
'    END READ_ROW;',
'    PROCEDURE READ_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/,',
'        MSG OUT NOCOPY "DBG_LOG"."MSG"%TYPE,',
'        NUM OUT NOCOPY "DBG_LOG"."NUM"%TYPE,',
'        THE_DATE OUT NOCOPY "DBG_LOG"."THE_DATE"%TYPE,',
'        THE_USER OUT NOCOPY "DBG_LOG"."THE_USER"%TYPE',
'    ) IS',
'        V_ROW "DBG_LOG"%ROWTYPE;',
'    BEGIN',
'        V_ROW := READ_ROW(ID => ID);',
'        MSG := V_ROW."MSG";',
'        NUM := V_ROW."NUM";',
'        THE_DATE := V_ROW."THE_DATE";',
'        THE_USER := V_ROW."THE_USER";',
'    END READ_ROW;',
'    FUNCTION READ_ROWS(',
'        P_REF_CURSOR IN T_STRONG_REF_CURSOR',
'    ) RETURN T_ROWS_TAB IS',
'        V_RETURN T_ROWS_TAB;',
'    BEGIN',
'        IF (P_REF_CURSOR%ISOPEN) THEN',
'            G_BULK_COMPLETED := FALSE;',
'            FETCH P_REF_CURSOR BULK COLLECT INTO V_RETURN LIMIT G_BULK_LIMIT;',
'            IF (V_RETURN.COUNT < G_BULK_LIMIT) THEN',
'                G_BULK_COMPLETED := TRUE;',
'            END IF;',
'        END IF;',
'        RETURN V_RETURN;',
'    END READ_ROWS;',
'    PROCEDURE DELETE_ROW(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) IS',
'    BEGIN',
'        DELETE FROM "DBG_LOG"',
'        WHERE',
'            "ID" = ID;',
'    END DELETE_ROW;',
'    PROCEDURE DELETE_ROWS(',
'        P_ROWS_TAB IN T_ROWS_TAB',
'    ) IS',
'    BEGIN',
'        FORALL I IN INDICES OF P_ROWS_TAB',
'            DELETE FROM "DBG_LOG"',
'            WHERE',
'                "ID" = P_ROWS_TAB(I)."ID";',
'    END DELETE_ROWS;',
'    FUNCTION GET_MSG(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."MSG"%TYPE IS',
'    BEGIN',
'        RETURN READ_ROW(',
'            ID => ID',
'        )."MSG";',
'    END GET_MSG;',
'    FUNCTION GET_NUM(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."NUM"%TYPE IS',
'    BEGIN',
'        RETURN READ_ROW(',
'            ID => ID',
'        )."NUM";',
'    END GET_NUM;',
'    FUNCTION GET_THE_DATE(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."THE_DATE"%TYPE IS',
'    BEGIN',
'        RETURN READ_ROW(',
'            ID => ID',
'        )."THE_DATE";',
'    END GET_THE_DATE;',
'    FUNCTION GET_THE_USER(',
'        ID IN "DBG_LOG"."ID"%TYPE /*PK*/',
'    ) RETURN "DBG_LOG"."THE_USER"%TYPE IS',
'    BEGIN',
'        RETURN READ_ROW(',
'            ID => ID',
'        )."THE_USER";',
'    END GET_THE_USER;',
'END "LOG_DBG";',
'/'))
);
wwv_flow_imp.component_end;
end;
/
